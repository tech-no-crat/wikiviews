// Generated by CoffeeScript 1.8.0
(function() {
  var config, endMonth, endYear, fs, makeRequest, month, monthString, openCalls, pad, request, result, startMonth, startYear, writeResult, writeResultIfReady, year;

  fs = require('fs');

  request = require('request');

  config = require('./config.json');

  if (process.argv.length > 2) {
    config.article = process.argv[2];
  }

  if (process.argv.length > 3) {
    config.filename = process.argv[3];
  }

  console.log("Getting data for " + config.article + ", saving to " + config.filename);

  openCalls = 0;

  result = {};

  pad = function(num, size) {
    return ('00000' + num).substr(-size);
  };

  monthString = function(year, month) {
    return year.toString() + pad(month.toString(), 2);
  };

  makeRequest = function(year, month, cb) {
    openCalls += 1;
    return request("" + config.baseURL + "/" + (monthString(year, month)) + "/" + config.article, function(err, resp, body) {
      var e, parsedResp, _base;
      if (err || resp.statusCode !== 200) {
        cb("Request failed, got err " + err + " and status " + (typeof (_base = !resp) === "function" ? _base(-{
          1: resp.statusCode
        }) : void 0), null);
      } else {
        try {
          parsedResp = JSON.parse(body);
        } catch (_error) {
          e = _error;
          cb("Invalid JSON: " + e, null);
        }
        if (parsedResp) {
          cb(null, parsedResp);
        }
      }
      return openCalls -= 1;
    });
  };

  writeResult = function() {
    var date, lines, views;
    lines = [];
    for (date in result) {
      views = result[date];
      lines.push("" + date + ", " + views);
    }
    return fs.writeFile(config.filename, lines.join("\n"), function(err) {
      if (err) {
        return console.log(err);
      }
    });
  };

  writeResultIfReady = function() {
    if (openCalls === 0) {
      return writeResult();
    } else {
      return setTimeout(writeResultIfReady, 500);
    }
  };

  startYear = parseInt(config.start.substring(0, 4));

  startMonth = parseInt(config.start.substring(4, 6));

  endYear = parseInt(config.end.substring(0, 4));

  endMonth = parseInt(config.end.substring(4, 6));

  month = startMonth;

  year = startYear;

  while (true) {
    makeRequest(year, month, function(err, res) {
      var date, views, _ref, _results;
      if (err) {
        return console.log("Error in request for " + (monthString(year, month)) + ": " + err);
      }
      _ref = res.daily_views;
      _results = [];
      for (date in _ref) {
        views = _ref[date];
        _results.push(result[date] = views);
      }
      return _results;
    });
    if (month === endMonth && year === endYear) {
      break;
    }
    month += 1;
    if (month > 12) {
      month = 1;
      year++;
    }
  }

  writeResultIfReady();

}).call(this);
